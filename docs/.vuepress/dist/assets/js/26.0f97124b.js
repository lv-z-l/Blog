(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{577:function(t,a,s){"use strict";s.r(a);var r=s(12),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),s("h2",{attrs:{id:"是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),s("blockquote",[s("p",[t._v("在软件工程中，设计模式是对软件设计中普遍存在的各种问题所提出的解决方案，设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力，因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式")])]),t._v(" "),s("h2",{attrs:{id:"有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些"}},[t._v("#")]),t._v(" 有哪些")]),t._v(" "),s("ul",[s("li",[t._v("单例模式")]),t._v(" "),s("li",[t._v("工厂模式")]),t._v(" "),s("li",[t._v("策略模式")]),t._v(" "),s("li",[t._v("代理模式")]),t._v(" "),s("li",[t._v("中介者模式")]),t._v(" "),s("li",[t._v("装饰者模式")]),t._v(" "),s("li",[t._v("......")])])])}),[],!1,null,null,null);a.default=e.exports}}]);